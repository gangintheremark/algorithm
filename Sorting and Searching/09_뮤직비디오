import java.util.Arrays;
import java.util.Scanner;

/*
    9  3 (9가지의 노래를 3개의 DVD에 넣을 때 DVD의 최소용량)
    1 2 3 4 5 6 7 8 9  (분)

    최소한 9분(젤 긴 노래)은 넣을 수 있어야한다. (최소 : 9) lt
    최대한 노래 전부는 넣을 수 있어야한다. (최대 : 45) rt
    -> 답은 9 ~ 45 이내에 확실하게 있다. (결정 알고리즘)

    mid = (9 + 45) / 2 = 27   (lt + rt)/2
    DVD 하나의 용량이 27이면 답으로써 가능한 숫자인가 검증 => DVD 생성 수를 count하는 함수 생성
    검증 성공했다면 최소용량을 찾아야 하므로 왼쪽부분에서 찾기 rt = mid - 1
    검증 실패했다면 오른쪽 부분에서 찾기 lt = mid + 1
    mid = (9 + 26) / 2 =  17
    DVD 하나의 용량이 17이면 답으로써 가능한 숫자이다.
    mid = (9 + 16) / 2 = 12
    DVD 하나의 용량이 12이면 답으로써 불가능하다.
    다시 오른쪽 부분에서 찾기  lt = mid + 1
 */
class Main {
    public int count(int[] arr, int capacity) {
        // 검증 : 해당 DVD 용량(capacity)으로 DVD 몇 장을 담을 수 있는가
        int cnt = 1;
        int sum = 0;

        for (int x : arr) {
            if (sum + x > capacity) {
                // 용량을 넘어서면 DVD 한 개 추가.
                cnt++;
                sum = x;
            } else {
                sum += x;
            }
        }
        return cnt;
    }

    public int solution(int n, int m, int[] arr) {
        int answer = 0;
        int lt = Arrays.stream(arr).max().getAsInt();
        int rt = Arrays.stream(arr).sum();

        while (lt <= rt) {
            int mid = (lt + rt) / 2;
            // 검증 : mid는 문제가 요구하는 답으로써 가능한가?

            if (count(arr, mid) <= m) {
                // 노래를 담은 용량이 m 과 같거나 작으면 검증성공
                // DVD가 m개 보다 작다는 의미는 m개로도 충분히 노래를 나눌 수 있으므로 검증 성공이다.

                answer = mid;
                rt = mid - 1; // 최소용량을 찾기위해 rt값 조정
            } else lt = mid + 1;
        }
        return answer;
    }

    public static void main(String[] args) {
        Main T = new Main();
        Scanner s = new Scanner(System.in);

        int n = s.nextInt(); // 노래 개수
        int m = s.nextInt(); // 노래를 담을 DVD개수

        int[] arr = new int[n]; // 각 노래의 길이
        for (int i = 0; i < n; i++) {
            arr[i] = s.nextInt();
        }
        System.out.println(T.solution(n, m, arr));
    }
}

